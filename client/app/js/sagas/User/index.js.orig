<<<<<<< HEAD
import {take, call, put, fork, race, select, takeLatest} from 'redux-saga/effects';
import {push} from 'react-router-redux';
import {apiUser} from 'api/User/';
=======
import { take, call, put, fork, race, takeLatest } from 'redux-saga/effects';
import { push } from 'react-router-redux';
import { apiUser } from 'api/User/';
>>>>>>> develop
import * as types from 'constants/user';
import {Session} from 'utils/Session';
import Api from 'api';
import {
    userLoginSuccess,
    userLoginFailure,
    registerUserFailure,
    registerUserSuccess,
    userLogoutSuccess,
    userLogoutFailure,
    authSuccess,
    notAuth,
    authFailure
} from 'actions/user';

<<<<<<< HEAD

const loginRequest = ({email, pwd}) => Api
    .post('/login', {
        'email': email,
        'password': pwd
    })
    .then(res => res.data)
    .catch(error => {
        throw  error;
    });


const checkToken = () => Api.get('/isAuth').then(res => res.data)
    .catch(error => {
        throw error;
    });


/**
 * TODO: check logout;
 */

=======
>>>>>>> develop
/**
 *
 * @param token
 * @returns {boolean}
 */
function* checkAuth() {
    try {
        const response = yield call( apiUser.checkToken );

<<<<<<< HEAD
        const response = yield call(apiUser.checkToken);

        yield put(authSuccess(response));
        return true;

        // else {
        //     Session.removeToken();
        //
        //     return false;
        // }

    } catch (error) {
        yield put(notAuth());
        Session.removeToken();
        // yield put(authFailure(error));
=======
        yield put( authSuccess( response ) );
        return true;

    } catch ( error ) {

        Session.removeToken();
        yield put( notAuth() );
>>>>>>> develop
        return false;

    }

}

/**
 *
 * @param payload
 * @returns {*}
 */
function* register({payload}) {

    try {
<<<<<<< HEAD
        debugger;
        const response = yield call(apiUser.register, payload);
        yield put(registerUserSuccess(response));
        return response;
    } catch (error) {
        yield put(registerUserFailure(error));
=======
        const response = yield call( apiUser.register, payload );
        yield put( registerUserSuccess( response ) );

        return response;

    } catch ( error ) {
        yield put( registerUserFailure( error ) );
        yield put( push( '/' ) );
>>>>>>> develop
        return false;
    }

}
/**
 *
 * @param payload
 * @returns {boolean}
 */
function* authorize({payload}) {

    try {
<<<<<<< HEAD
        const response = yield call(loginRequest, payload);
        yield put(userLoginSuccess(response));
        Session.setToken(response.access_token);
=======
        const response = yield call( apiUser.login, payload );
>>>>>>> develop

        yield put( userLoginSuccess( response ) );
        Session.setToken( response.access_token );
        return true;
    }
    catch (error) {
        yield put(userLoginFailure(error));

        return false;
    }

}
/**
 *
 * @returns {*}
 */
function* logout() {

<<<<<<< HEAD
    try {
        const response = yield call(Session.removeToken);
        yield put(userLogoutSuccess);
        return true;
    }
    catch (error) {
        yield put(userLogoutFailure(error));
        return false;
    }
=======
    const response = yield call( Session.removeToken );

    return response;

>>>>>>> develop
}


/**
 *
 */
function* loginFlow() {

    while (true) {

<<<<<<< HEAD
        const request = yield take(types.USER_LOGIN);

        const winner = yield race({
            auth: call(authorize, request),
            logout: take(types.USER_LOGOUT)
        });

        if (winner.auth) {
            yield put(push('/projects'));
=======
        const request = yield take( types.USER_LOGIN );


        const winner = yield race( {
            auth  : call( authorize, request ),
            logout: take( types.USER_LOGOUT )
        } );

        if ( winner.auth ) {
            yield put( push( '/projects' ) );
>>>>>>> develop
        }


    }

}
/**
 *
 */
function* logoutFlow() {
    while (true) {

<<<<<<< HEAD
        yield take(types.USER_LOGOUT);
        yield call(logout);
        yield put(push('/'));
=======
        yield take( types.USER_LOGOUT );
        const isSuccess = yield call( logout );

        if ( isSuccess )
            yield put( push( '/' ) );
>>>>>>> develop
    }
}

/**
 *
 */
function* registerFlow() {
<<<<<<< HEAD
    while (true) {
        const request = yield take(types.REGISTER_USER);

        const response = yield call(register, request);
=======
    while ( true ) {

        const request  = yield take( types.REGISTER_USER );
        const response = yield call( apiUser.register, request );
>>>>>>> develop


        if (typeof response === 'object') {

            const isAuth = yield call(authorize, response);

            if (isAuth) {
                yield put(push('/projects'));
            }

        }

    }

}


<<<<<<< HEAD
function* checkTokenFlow() {
    yield takeLatest('CHECK_AUTH', checkAuth);
=======
/**
 *
 */
function* checkTokenFlow() {
    yield takeLatest( types.CHECK_AUTH, checkAuth );
>>>>>>> develop

}
/**
 *
 */
function * rootUserSagas() {
    yield[
<<<<<<< HEAD
        fork(loginFlow),
        fork(logoutFlow),
        fork(registerFlow),
        fork(checkTokenFlow)
=======
        fork( loginFlow ),
        fork( logoutFlow ),
        fork( registerFlow ),
        fork( checkTokenFlow )
>>>>>>> develop
    ];
}
/**
 *
 */
export default rootUserSagas;
